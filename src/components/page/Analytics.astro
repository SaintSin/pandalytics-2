---
// src/components/Analytics.astro
// Core Web Vitals tracking only
// Updated 250906 15:01

const siteId = Astro.site ? new URL(Astro.site).hostname : "localhost";
---

<script define:vars={{ siteId }} is:inline>
  (function () {
    // Skip in development
    if (
      location.hostname === "localhost" ||
      location.hostname === "127.0.0.1"
    ) {
      // console.log("ðŸš§ Core Web Vitals tracking disabled in development");
      return;
    }

    function trackCoreWebVitals() {
      // Simple deduplication - once per page load
      const pageKey = `cwv_tracked_${location.pathname}_${Date.now()}`;
      if (sessionStorage.getItem(pageKey)) {
        return;
      }
      sessionStorage.setItem(pageKey, "true");

      // Generate minimal session ID for this page load
      let sessionId = sessionStorage.getItem("cwv_session");
      if (!sessionId) {
        sessionId =
          "cwv_" +
          Date.now() +
          "_" +
          Math.random().toString(36).substring(2, 11);
        sessionStorage.setItem("cwv_session", sessionId);
      }

      // Basic page metrics (matching function interface)
      const metrics = {
        session_id: sessionId,
        site_id: siteId,
        url: location.href,
        path: location.pathname,
        // Core Web Vitals
        lcp: null,
        fid: null,
        cls: 0,
        fcp: null,
        ttfb: null,
      };

      // LCP - Largest Contentful Paint
      new PerformanceObserver((list) => {
        const lastEntry = list.getEntries().pop();
        if (lastEntry) {
          metrics.lcp =
            lastEntry.renderTime || lastEntry.loadTime || lastEntry.startTime;
        }
      }).observe({ type: "largest-contentful-paint", buffered: true });

      // FID - First Input Delay
      new PerformanceObserver((list) => {
        const firstInput = list.getEntries()[0];
        if (firstInput && firstInput.processingStart) {
          metrics.fid = firstInput.processingStart - firstInput.startTime;
        }
      }).observe({ type: "first-input", buffered: true });

      // CLS - Cumulative Layout Shift
      new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          if (!entry.hadRecentInput && entry.value !== undefined) {
            metrics.cls += entry.value;
          }
        }
      }).observe({ type: "layout-shift", buffered: true });

      // FCP - First Contentful Paint
      new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          if (entry.name === "first-contentful-paint") {
            metrics.fcp = entry.startTime;
          }
        }
      }).observe({ type: "paint", buffered: true });

      // TTFB - Time to First Byte
      const navEntry = performance.getEntriesByType("navigation")[0];
      if (navEntry && navEntry.responseStart) {
        metrics.ttfb = navEntry.responseStart;
      }

      // console.log("ðŸ“Š Core Web Vitals:", metrics);

      // Send metrics after delay to capture CWV
      setTimeout(() => {
        const blob = new Blob([JSON.stringify(metrics)], {
          type: "application/json",
        });

        // console.log(`ðŸ“Š Sending CWV for ${metrics.path}`);

        if (navigator.sendBeacon) {
          navigator.sendBeacon("/.netlify/functions/pandalytics", blob);
        } else {
          fetch("/.netlify/functions/pandalytics", {
            method: "POST",
            body: JSON.stringify(metrics),
            headers: { "Content-Type": "application/json" },
            keepalive: true,
          }).catch(() => {});
        }
      }, 1500);
    }

    // Track on page load
    trackCoreWebVitals();

    // Handle Astro view transitions
    document.addEventListener("astro:page-load", trackCoreWebVitals);
  })();
</script>
