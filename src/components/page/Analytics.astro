---
// src/components/Analytics.astro
// Last updated: 2025-08-19 13:45

/* Client script for Core Web Vitals + session tracking */
---

<script>
  (function () {
    function generateUUID() {
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
        const r = (Math.random() * 16) | 0;
        const v = c === "x" ? r : (r & 0x3) | 0x8;
        return v.toString(16);
      });
    }

    const siteId = "Pandalytics 2a2"; // Change per site

    function initializeAnalytics() {
      let sessionId = sessionStorage.getItem("session_id");
      if (!sessionId) {
        sessionId = generateUUID();
        sessionStorage.setItem("session_id", sessionId);
        sessionStorage.setItem("session_start", Date.now().toString());
        sessionStorage.setItem("pageviews_in_session", "0");
      }

      // Only increment pageviews if this is a new page load, not a script re-run
      const currentPageKey = `visited_${sessionId}_${location.pathname}`;
      const hasVisitedThisPage = sessionStorage.getItem(currentPageKey);

      let pageviews = parseInt(
        sessionStorage.getItem("pageviews_in_session") || "0",
        10,
      );
      let isNewPageVisit = false;

      if (!hasVisitedThisPage) {
        pageviews += 1;
        isNewPageVisit = true;
        sessionStorage.setItem("pageviews_in_session", pageviews.toString());
        sessionStorage.setItem(currentPageKey, "true");
      }

      // Metrics store
      let metrics = {
        session_id: sessionId,
        site_id: siteId,
        url: location.href,
        path: location.pathname,
        referrer: document.referrer || null,
        screen_width: window.screen.width,
        screen_height: window.screen.height,
        user_agent: navigator.userAgent,
        lcp: null as number | null,
        cls: 0,
        fid: null as number | null,
        fcp: null as number | null,
        ttfb: null as number | null,
        inp: null as number | null,
        duration_ms: 0,
        bounce: pageviews === 1 ? 1 : 0,
        pageviews_in_session: pageviews,
      };

      // Only send metrics if this is a new page visit
      if (!isNewPageVisit) {
        console.log(
          "🚫 Page already visited in this session, not sending metrics",
        );
        return;
      }

      const poLCP = new PerformanceObserver((list) => {
        const lastEntry = list.getEntries().pop() as
          | PerformanceNavigationTiming
          | PerformancePaintTiming
          | any;
        if (lastEntry) {
          metrics.lcp =
            lastEntry.renderTime || lastEntry.loadTime || lastEntry.startTime;
        }
      });
      poLCP.observe({ type: "largest-contentful-paint", buffered: true });

      const poFID = new PerformanceObserver((list) => {
        const firstInput = list.getEntries()[0] as any;
        if (firstInput && firstInput.processingStart) {
          metrics.fid = firstInput.processingStart - firstInput.startTime;
        }
      });
      poFID.observe({ type: "first-input", buffered: true });

      const poCLS = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          const clsEntry = entry as any;
          if (!clsEntry.hadRecentInput && clsEntry.value !== undefined) {
            metrics.cls += clsEntry.value;
          }
        }
      });
      poCLS.observe({ type: "layout-shift", buffered: true });

      const poPaint = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          if (entry.name === "first-contentful-paint") {
            metrics.fcp = entry.startTime;
          }
        }
      });
      poPaint.observe({ type: "paint", buffered: true });

      const navEntry = performance.getEntriesByType(
        "navigation",
      )[0] as PerformanceNavigationTiming;
      if (navEntry && navEntry.responseStart) {
        metrics.ttfb = navEntry.responseStart;
      }

      // Duration tracking from navigation start (consistent with performance metrics)
      const navigationStart = performance.timeOrigin;
      const pageLoadKey = `metrics_sent_${sessionId}_${location.pathname}_${Date.now()}`;
      let metricsSent = sessionStorage.getItem(pageLoadKey) === "true";

      console.log("🔧 Analytics script initialized for session:", sessionId);

      window.addEventListener("beforeunload", () => {
        console.log("🚪 beforeunload event, metricsSent:", metricsSent);
        if (!metricsSent) {
          metrics.duration_ms = Date.now() - navigationStart;
          sendMetrics();
        }
      });
      document.addEventListener("visibilitychange", () => {
        console.log(
          "👁️ visibilitychange event, state:",
          document.visibilityState,
          "metricsSent:",
          metricsSent,
        );
        if (document.visibilityState === "hidden" && !metricsSent) {
          metrics.duration_ms = Date.now() - navigationStart;
          sendMetrics();
        }
      });

      function sendMetrics() {
        if (metricsSent) {
          console.log("⚠️ Metrics already sent, skipping");
          return;
        }
        metricsSent = true;
        sessionStorage.setItem(pageLoadKey, "true");
        console.log("📤 Sending metrics:", metrics);

        const blob = new Blob([JSON.stringify(metrics)], {
          type: "application/json",
        });

        if (!navigator.sendBeacon("/.netlify/functions/pandalytics", blob)) {
          fetch("/.netlify/functions/pandalytics", {
            method: "POST",
            body: JSON.stringify(metrics),
            headers: {
              "Content-Type": "application/json",
            },
            keepalive: true,
          }).catch(() => {});
        }
      }

      // Clean up old metrics_sent keys (keep only last 10 entries)
      const allKeys = Object.keys(sessionStorage);
      const metricKeys = allKeys.filter((key) =>
        key.startsWith("metrics_sent_"),
      );
      if (metricKeys.length > 10) {
        metricKeys.sort();
        metricKeys
          .slice(0, -10)
          .forEach((key) => sessionStorage.removeItem(key));
      }
    }

    // Initialize on page load
    initializeAnalytics();

    // Listen for Astro View Transitions
    document.addEventListener("astro:page-load", () => {
      console.log("🔄 Astro View Transition detected");
      initializeAnalytics();
    });
  })();
</script>
