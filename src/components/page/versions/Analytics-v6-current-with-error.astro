---
// ANALYTICS VERSION 6 - CURRENT VERSION (HAS JAVASCRIPT ERROR)
// Date: 250906 15:44 (current)
// Status: WORKING but has JavaScript ReferenceError
// Changes from V5:
// - ‚úÖ Added comprehensive console logging for debugging
// - ‚úÖ Enhanced browser detection comments
// - ‚úÖ All analytics functionality works end-to-end
// - ‚úÖ Data successfully reaches database
// Issues:
// - ‚ùå CRITICAL BUG: "ReferenceError: Can't find variable: currentMetrics" at line 1156
// - ‚ùå Error occurs in timeout function trying to reference wrong variable name
// - ‚ùå Browser detection still shows "Unknown" in database despite console showing correct values
// - ‚ùå Some missing CWV data (inherent JavaScript measurement limitation)
// Key Issue Location: Line ~211 in timeout function references `currentMetrics` but variable is `metrics`
// Status: This is the version currently deployed and causing the JavaScript error in Safari/other browsers

const siteId = Astro.site ? new URL(Astro.site).hostname : "localhost";
---

<script define:vars={{ siteId }} is:inline>
  (function () {
    console.log("üöÄ Analytics component loaded, hostname:", location.hostname);
    
    // Skip in development
    if (
      location.hostname === "localhost" ||
      location.hostname === "127.0.0.1"
    ) {
      console.log("üöß Core Web Vitals tracking disabled in development");
      return;
    }

    function trackCoreWebVitals() {
      // Generate minimal session ID for this page load
      let sessionId = sessionStorage.getItem("cwv_session");
      if (!sessionId) {
        sessionId = 'cwv_' + Date.now() + '_' + Math.random().toString(36).substring(2, 11);
        sessionStorage.setItem("cwv_session", sessionId);
      }

      // Detect if this is initial page load or SPA navigation
      const isInitialLoad = !sessionStorage.getItem("cwv_initialized");
      const currentPath = location.pathname;
      const lastPath = sessionStorage.getItem("cwv_last_path");
      
      // Time-based deduplication - prevent duplicate CWV within 60 seconds for same page
      const now = Date.now();
      const lastSentKey = `cwv_last_sent_${currentPath}`;
      const lastSent = parseInt(sessionStorage.getItem(lastSentKey) || "0");
      const timeSinceLastSent = now - lastSent;
      const cooldownPeriod = 60 * 1000; // 60 seconds
      
      console.log("üîç Checking time-based deduplication:", { 
        currentPath, 
        timeSinceLastSent: Math.round(timeSinceLastSent / 1000) + "s", 
        cooldownPeriod: cooldownPeriod / 1000 + "s",
        shouldSkip: timeSinceLastSent < cooldownPeriod 
      });
      
      if (timeSinceLastSent < cooldownPeriod) {
        console.log(`‚è≠Ô∏è  Skipping - already sent CWV for ${currentPath} ${Math.round(timeSinceLastSent / 1000)}s ago (cooldown: ${cooldownPeriod / 1000}s)`);
        return;
      }

      // Mark as initialized and update last path
      sessionStorage.setItem("cwv_initialized", "true");
      sessionStorage.setItem("cwv_last_path", currentPath);

      // Parse browser from user agent
      const parseBrowser = (userAgent) => {
        if (!userAgent) return "Unknown";
        const ua = userAgent.toLowerCase();

        if (ua.includes("firefox/")) {
          const version = userAgent.match(/firefox\/(\d+)/i);
          return `Firefox ${version ? version[1] : ""}`;
        } else if (ua.includes("chrome/") && !ua.includes("edg")) {
          const version = userAgent.match(/chrome\/(\d+)/i);
          return `Chrome ${version ? version[1] : ""}`;
        } else if (ua.includes("edg/")) {
          const version = userAgent.match(/edg\/(\d+)/i);
          return `Edge ${version ? version[1] : ""}`;
        } else if (ua.includes("safari/") && !ua.includes("chrome")) {
          const version = userAgent.match(/version\/(\d+)/i);
          return `Safari ${version ? version[1] : ""}`;
        } else {
          return "Other";
        }
      };

      // Parse browser info
      const browser = parseBrowser(navigator.userAgent);

      // Basic page metrics (matching function interface)
      const metrics = {  // ‚úÖ Variable name is 'metrics'
        session_id: sessionId,
        site_id: siteId,
        url: location.href,
        path: location.pathname,
        user_agent: navigator.userAgent,
        browser: browser, // Add parsed browser to override server-side parsing
        screen_width: window.screen.width,
        screen_height: window.screen.height,
        // Core Web Vitals
        lcp: null,
        fid: null,
        cls: 0,
        fcp: null,
        ttfb: null,
      };

      // Hybrid approach: different strategies for initial load vs SPA navigation
      if (isInitialLoad) {
        // [Performance Observer setup for initial load...]
      } else {
        // [Performance Observer setup for SPA navigation...]
      }

      // TTFB - Time to First Byte (only meaningful for initial page load)
      if (isInitialLoad) {
        const navEntry = performance.getEntriesByType("navigation")[0];
        if (navEntry && navEntry.responseStart) {
          metrics.ttfb = navEntry.responseStart;
        }
      } else {
        metrics.ttfb = null;
      }

      console.log("üìä Core Web Vitals:", metrics);

      // Send metrics after delay to capture CWV
      setTimeout(() => {
        const blob = new Blob([JSON.stringify(metrics)], {
          type: "application/json",
        });

        console.log(`üìä Sending CWV for ${metrics.path}`);

        if (navigator.sendBeacon) {
          navigator.sendBeacon("/.netlify/functions/pandalytics", blob);
        } else {
          fetch("/.netlify/functions/pandalytics", {
            method: "POST",
            body: JSON.stringify(metrics),
            headers: { "Content-Type": "application/json" },
            keepalive: true,
          }).catch(() => {});
        }

        // ‚ùå BUG HERE: Line ~211 references 'currentMetrics' but variable is 'metrics'
        const lastSentKey = `cwv_last_sent_${currentMetrics.path}`; // ERROR! Should be 'metrics.path'
        sessionStorage.setItem(lastSentKey, Date.now().toString());
        console.log("‚úÖ Marked CWV as sent for", currentMetrics.path); // ERROR! Should be 'metrics.path'
      }, 1500);
    }

    try {
      // Track on page load
      console.log("üéØ Attempting to track CWV on page load");
      trackCoreWebVitals();

      // Handle Astro view transitions
      document.addEventListener("astro:page-load", trackCoreWebVitals);
      console.log("‚úÖ Analytics setup complete");
    } catch (error) {
      console.error("‚ùå Analytics setup failed:", error);
    }
  })();
</script>