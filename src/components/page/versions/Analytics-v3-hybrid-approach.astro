---
// ANALYTICS VERSION 3 - HYBRID APPROACH
// Date: After explaining SPA vs MPA and implementing hybrid solution
// Status: MAJOR BREAKTHROUGH - Fixed identical CWV values!
// Key Innovation: Different strategies for initial load vs SPA navigation
// Changes from V2:
// - Introduced isInitialLoad detection
// - Initial load: buffered observers (complete CWV capture)
// - SPA navigation: non-buffered observers (fresh metrics only)
// - Added timestamp filtering for SPA navigations
// Issues Fixed:
// - ✅ Identical CWV values across pages (SOLVED!)
// - ✅ Proper differentiation between page types
// Remaining Issues:
// - Still no browser version detection
// - Still permanent session blocking
// - Some missing CWV data ("-" dashes)

const siteId = Astro.site ? new URL(Astro.site).hostname : "localhost";
---

<script define:vars={{ siteId }} is:inline>
  (function () {
    console.log("🚀 Hybrid CWV tracking loaded");

    if (
      location.hostname === "localhost" ||
      location.hostname === "127.0.0.1"
    ) {
      console.log("🚧 CWV tracking disabled in development");
      return;
    }

    function trackCoreWebVitals() {
      let sessionId = sessionStorage.getItem("cwv_session");
      if (!sessionId) {
        sessionId =
          "cwv_" +
          Date.now() +
          "_" +
          Math.random().toString(36).substring(2, 11);
        sessionStorage.setItem("cwv_session", sessionId);
      }

      // BREAKTHROUGH: Detect initial load vs SPA navigation
      const isInitialLoad = !sessionStorage.getItem("cwv_initialized");

      const trackingKey = `cwv_tracked_${sessionId}_${location.pathname}`;
      if (sessionStorage.getItem(trackingKey)) {
        console.log("⏭️ CWV already tracked for this page");
        return;
      }

      sessionStorage.setItem("cwv_initialized", "true");

      const metrics = {
        session_id: sessionId,
        site_id: siteId,
        url: location.href,
        path: location.pathname,
        user_agent: navigator.userAgent,
        screen_width: window.screen.width,
        screen_height: window.screen.height,
        lcp: null,
        fid: null,
        cls: 0,
        fcp: null,
        ttfb: null,
      };

      // HYBRID APPROACH: Different strategies!
      if (isInitialLoad) {
        console.log("📊 Initial page load - using buffered observers");

        // Use buffered observers for complete CWV capture
        new PerformanceObserver((list) => {
          const lastEntry = list.getEntries().pop();
          if (lastEntry) {
            metrics.lcp = lastEntry.renderTime || lastEntry.loadTime;
          }
        }).observe({ type: "largest-contentful-paint", buffered: true });

        // [Other buffered observers...]
      } else {
        console.log("📊 SPA navigation - using fresh observers");
        const navigationStart = performance.now();

        // Use non-buffered observers with timestamp filtering
        new PerformanceObserver((list) => {
          const entries = list
            .getEntries()
            .filter((entry) => entry.startTime > navigationStart);
          const lastEntry = entries.pop();
          if (lastEntry) {
            metrics.lcp = lastEntry.renderTime || lastEntry.loadTime;
          }
        }).observe({ type: "largest-contentful-paint", buffered: false });

        // [Other filtered observers...]
      }

      setTimeout(() => {
        const blob = new Blob([JSON.stringify(metrics)], {
          type: "application/json",
        });

        console.log("📊 Sending hybrid CWV:", metrics);

        if (navigator.sendBeacon) {
          navigator.sendBeacon("/.netlify/functions/pandalytics", blob);
        }

        sessionStorage.setItem(trackingKey, "true");
      }, 1500);
    }

    trackCoreWebVitals();
    document.addEventListener("astro:page-load", trackCoreWebVitals);
  })();
</script>
