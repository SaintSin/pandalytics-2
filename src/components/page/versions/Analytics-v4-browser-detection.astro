---
// ANALYTICS VERSION 4 - ADDED BROWSER DETECTION
// Date: After user requested browser version tracking, especially Chrome versions
// Status: PARTIALLY WORKING - Client-side parsing works, but database still shows "Unknown"
// Changes from V3:
// - ‚úÖ Added comprehensive client-side browser parsing with versions
// - ‚úÖ Chrome, Firefox, Edge, Safari version detection
// - ‚úÖ Sends parsed browser info to override server-side parsing
// Issues Fixed:
// - ‚úÖ Browser version detection in console logs
// Remaining Issues:
// - ‚ùå Database still shows "Unknown" despite console showing correct values
// - ‚ùå Still permanent session blocking
// - ‚ùå Some missing CWV data
// Key Insight: Browser parsing works client-side but isn't reaching database properly

const siteId = Astro.site ? new URL(Astro.site).hostname : "localhost";
---

<script define:vars={{ siteId }} is:inline>
	(function () {
		console.log("üöÄ CWV + Browser tracking loaded");

		if (
			location.hostname === "localhost" ||
			location.hostname === "127.0.0.1"
		) {
			console.log("üöß Tracking disabled in development");
			return;
		}

		function trackCoreWebVitals() {
			let sessionId = sessionStorage.getItem("cwv_session");
			if (!sessionId) {
				sessionId =
					"cwv_" +
					Date.now() +
					"_" +
					Math.random().toString(36).substring(2, 11);
				sessionStorage.setItem("cwv_session", sessionId);
			}

			const isInitialLoad = !sessionStorage.getItem("cwv_initialized");

			const trackingKey = `cwv_tracked_${sessionId}_${location.pathname}`;
			if (sessionStorage.getItem(trackingKey)) {
				console.log("‚è≠Ô∏è Already tracked");
				return;
			}

			sessionStorage.setItem("cwv_initialized", "true");

			// NEW: Client-side browser parsing with versions!
			const parseBrowser = (userAgent) => {
				if (!userAgent) return "Unknown";
				const ua = userAgent.toLowerCase();

				if (ua.includes("firefox/")) {
					const version = userAgent.match(/firefox\/(\d+)/i);
					return `Firefox ${version ? version[1] : ""}`;
				} else if (ua.includes("chrome/") && !ua.includes("edg")) {
					const version = userAgent.match(/chrome\/(\d+)/i);
					return `Chrome ${version ? version[1] : ""}`; // This works in console!
				} else if (ua.includes("edg/")) {
					const version = userAgent.match(/edg\/(\d+)/i);
					return `Edge ${version ? version[1] : ""}`;
				} else if (ua.includes("safari/") && !ua.includes("chrome")) {
					const version = userAgent.match(/version\/(\d+)/i);
					return `Safari ${version ? version[1] : ""}`;
				} else {
					return "Other";
				}
			};

			const browser = parseBrowser(navigator.userAgent);
			console.log("üîç Detected browser:", browser); // Shows correctly!

			const metrics = {
				session_id: sessionId,
				site_id: siteId,
				url: location.href,
				path: location.pathname,
				user_agent: navigator.userAgent,
				browser: browser, // NEW: Send parsed browser to override server-side
				screen_width: window.screen.width,
				screen_height: window.screen.height,
				lcp: null,
				fid: null,
				cls: 0,
				fcp: null,
				ttfb: null,
			};

			// Hybrid approach continues...
			if (isInitialLoad) {
				// [Buffered observers...]
			} else {
				// [Non-buffered observers with filtering...]
			}

			setTimeout(() => {
				const blob = new Blob([JSON.stringify(metrics)], {
					type: "application/json",
				});

				console.log("üìä Sending with browser:", metrics.browser); // Shows correctly!

				if (navigator.sendBeacon) {
					navigator.sendBeacon("/.netlify/functions/pandalytics", blob);
				}

				sessionStorage.setItem(trackingKey, "true");
			}, 1500);
		}

		trackCoreWebVitals();
		document.addEventListener("astro:page-load", trackCoreWebVitals);
	})();
</script>
