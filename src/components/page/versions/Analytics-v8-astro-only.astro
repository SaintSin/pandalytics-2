---
// ANALYTICS VERSION 8 - ASTRO ONLY (SIMPLIFIED)
// Date: 250906 16:00
// Status: SIMPLIFIED - For Astro sites with view transitions only
// Key Simplifications:
// - No hybrid approach (initial load vs SPA detection)
// - Only use astro:page-load event (fires for all navigation)
// - Always use non-buffered Performance Observers (fresh metrics per page)
// - Simplified session management
// - Per-page time-based deduplication only
// Theory: This should eliminate duplicate CWV values completely

const siteId = Astro.site ? new URL(Astro.site).hostname : "localhost";
---

<script define:vars={{ siteId }} is:inline>
  (function () {
    console.log("🚀 Astro-only Analytics loaded");
    
    if (location.hostname === "localhost" || location.hostname === "127.0.0.1") {
      console.log("🚧 Disabled in development");
      return;
    }

    function trackPageCWV() {
      // Simple session management - one per browser session
      let sessionId = sessionStorage.getItem("astro_cwv_session");
      if (!sessionId) {
        sessionId = 'cwv_' + Date.now() + '_' + Math.random().toString(36).substring(2, 11);
        sessionStorage.setItem("astro_cwv_session", sessionId);
        console.log("🆕 New session:", sessionId);
      }

      const currentPath = location.pathname;
      
      // Per-page time-based deduplication (60 seconds)
      const now = Date.now();
      const lastSentKey = `cwv_sent_${currentPath}`;
      const lastSent = parseInt(sessionStorage.getItem(lastSentKey) || "0");
      const timeSinceLastSent = now - lastSent;
      const cooldown = 60000; // 60s
      
      if (timeSinceLastSent < cooldown) {
        console.log(`⏭️ Skip ${currentPath} - sent ${Math.round(timeSinceLastSent/1000)}s ago`);
        return;
      }

      // Browser detection
      const parseBrowser = (ua) => {
        if (!ua) return "Unknown";
        const lower = ua.toLowerCase();
        if (lower.includes("safari/") && !lower.includes("chrome")) {
          const version = ua.match(/version\/(\d+)/i);
          return `Safari ${version ? version[1] : ""}`;
        } else if (lower.includes("chrome/") && !lower.includes("edg")) {
          const version = ua.match(/chrome\/(\d+)/i);
          return `Chrome ${version ? version[1] : ""}`;
        } else if (lower.includes("firefox/")) {
          const version = ua.match(/firefox\/(\d+)/i);
          return `Firefox ${version ? version[1] : ""}`;
        }
        return "Other";
      };

      const browser = parseBrowser(navigator.userAgent);
      console.log("🔍 Browser:", browser, "| Path:", currentPath);

      const metrics = {
        session_id: sessionId,
        site_id: siteId,
        url: location.href,
        path: currentPath,
        user_agent: navigator.userAgent,
        browser: browser,
        screen_width: window.screen.width,
        screen_height: window.screen.height,
        lcp: null,
        fid: null,
        cls: 0,
        fcp: null,
        ttfb: null,
      };

      const captureStart = performance.now();
      console.log("📊 Starting fresh CWV capture at:", captureStart);

      // ALWAYS use non-buffered observers for fresh metrics per page
      // LCP
      new PerformanceObserver((list) => {
        // Only capture LCP entries that occurred after this page load
        const entries = list.getEntries().filter(e => e.startTime > captureStart);
        const lastEntry = entries.pop();
        if (lastEntry) {
          metrics.lcp = lastEntry.renderTime || lastEntry.loadTime || lastEntry.startTime;
          console.log("✅ Fresh LCP:", metrics.lcp);
        }
      }).observe({ type: "largest-contentful-paint", buffered: false });

      // FCP  
      new PerformanceObserver((list) => {
        const entries = list.getEntries().filter(e => e.startTime > captureStart);
        for (const entry of entries) {
          if (entry.name === "first-contentful-paint") {
            metrics.fcp = entry.startTime;
            console.log("✅ Fresh FCP:", metrics.fcp);
          }
        }
      }).observe({ type: "paint", buffered: false });

      // CLS - only new layout shifts
      new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          if (!entry.hadRecentInput && entry.value !== undefined && entry.startTime > captureStart) {
            metrics.cls += entry.value;
            console.log("✅ Fresh CLS delta:", entry.value, "| Total:", metrics.cls);
          }
        }
      }).observe({ type: "layout-shift", buffered: false });

      // FID - capture first input after this page
      new PerformanceObserver((list) => {
        const entries = list.getEntries().filter(e => e.startTime > captureStart);
        const firstInput = entries[0];
        if (firstInput && firstInput.processingStart) {
          metrics.fid = firstInput.processingStart - firstInput.startTime;
          console.log("✅ Fresh FID:", metrics.fid);
        }
      }).observe({ type: "first-input", buffered: false });

      // Send after delay to capture metrics
      setTimeout(() => {
        console.log("📤 Final metrics:", {
          session: metrics.session_id,
          path: metrics.path,
          browser: metrics.browser,
          lcp: metrics.lcp,
          fcp: metrics.fcp,
          cls: metrics.cls
        });

        const blob = new Blob([JSON.stringify(metrics)], { type: "application/json" });
        
        if (navigator.sendBeacon) {
          navigator.sendBeacon("/.netlify/functions/pandalytics", blob);
          console.log("📡 Sent via beacon");
        } else {
          fetch("/.netlify/functions/pandalytics", {
            method: "POST",
            body: JSON.stringify(metrics),
            headers: { "Content-Type": "application/json" },
            keepalive: true,
          }).catch(() => {});
          console.log("📡 Sent via fetch");
        }

        // Mark as sent
        sessionStorage.setItem(lastSentKey, now.toString());
        console.log("✅ Marked sent at:", new Date().toLocaleTimeString());
      }, 1500);
    }

    // ONLY listen to astro:page-load (fires for all Astro navigation)
    document.addEventListener("astro:page-load", () => {
      console.log("🎯 astro:page-load fired");
      trackPageCWV();
    });
    
    console.log("✅ Astro Analytics ready");
  })();
</script>