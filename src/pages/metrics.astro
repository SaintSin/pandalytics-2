---
import Layout from "@layouts/BaseLayout.astro";
import { BaselineStatus } from "astro-embed";

const meta = {
  title: "Welcome to Astro",
  description: "The metadescription",
  imageOG: "generic-social-1200x630.png",
  altOG: "Alt text for OG image",
};
const PANDALYTICS_TURSO_REST_ENDPOINT = import.meta.env
  .PANDALYTICS_TURSO_REST_ENDPOINT;
const PANDALYTICS_TURSO_API_TOKEN = import.meta.env.PANDALYTICS_TURSO_API_TOKEN;

// SQL query to fetch latest 50 pageviews with session data
const sql = `
  SELECT 
    p.session_id,
    s.site_id,
    p.url,
    p.path,
    s.country_code,
    s.screen_width,
    s.screen_height,
    p.timestamp,
    p.lcp,
    p.cls,
    p.fid,
    p.fcp,
    p.ttfb,
    p.inp,
    s.browser
  FROM pageviews p
  JOIN sessions s ON p.session_id = s.session_id
  ORDER BY p.timestamp DESC
  LIMIT 50
`;

// Browser is now stored directly in sessions table, no parsing needed

// Function to format Core Web Vitals with color coding
function formatCWV(metric, value) {
  if (value === null || value === undefined) return "-";

  const val = Math.round(value);

  switch (metric) {
    case "lcp":
      return val <= 2500
        ? `<span style="color: green">${val}ms</span>`
        : val <= 4000
          ? `<span style="color: orange">${val}ms</span>`
          : `<span style="color: red">${val}ms</span>`;
    case "fid":
      return val <= 100
        ? `<span style="color: green">${val}ms</span>`
        : val <= 300
          ? `<span style="color: orange">${val}ms</span>`
          : `<span style="color: red">${val}ms</span>`;
    case "cls":
      const clsVal = (val / 1000).toFixed(3);
      return val <= 100
        ? `<span style="color: green">${clsVal}</span>`
        : val <= 250
          ? `<span style="color: orange">${clsVal}</span>`
          : `<span style="color: red">${clsVal}</span>`;
    case "fcp":
      return val <= 1800
        ? `<span style="color: green">${val}ms</span>`
        : val <= 3000
          ? `<span style="color: orange">${val}ms</span>`
          : `<span style="color: red">${val}ms</span>`;
    case "ttfb":
      return val <= 800
        ? `<span style="color: green">${val}ms</span>`
        : val <= 1800
          ? `<span style="color: orange">${val}ms</span>`
          : `<span style="color: red">${val}ms</span>`;
    case "inp":
      return val <= 200
        ? `<span style="color: green">${val}ms</span>`
        : val <= 500
          ? `<span style="color: orange">${val}ms</span>`
          : `<span style="color: red">${val}ms</span>`;
    default:
      return `${val}ms`;
  }
}

let results = [];
let errorMsg = null;

try {
  const res = await fetch(PANDALYTICS_TURSO_REST_ENDPOINT, {
    method: "POST",
    headers: {
      Authorization: `Bearer ${PANDALYTICS_TURSO_API_TOKEN}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      statements: [{ q: sql }],
    }),
  });

  if (!res.ok) {
    errorMsg = `Error fetching metrics: ${res.status} ${res.statusText}`;
  } else {
    const data = await res.json();
    // console.log('Turso raw data:', JSON.stringify(data, null, 2));

    if (data?.[0]?.results?.rows) {
      results = data[0].results.rows;
    } else {
      errorMsg = "No rows found in Turso response.";
    }
  }
} catch (err) {
  errorMsg = `Fetch error: ${err.message}`;
}
---

<Layout metaData={meta}>
  <main class="wrapper">
    <h1>Latest Metrics</h1>

    {
      errorMsg ? (
        <p class="error">{errorMsg}</p>
      ) : results.length > 0 ? (
        <table>
          <thead>
            <tr>
              <th>Site ID</th>
              <th>Path</th>
              <th>LCP</th>
              <th>CLS</th>
              <th>INP</th>
              <th>FCP</th>
              <th>TTFB</th>
              <th>FID*</th>
              <th>Browser</th>
              <th>Screen</th>
              <th>Country</th>
              <th>Timestamp / Session</th>
            </tr>
          </thead>
          <tbody>
            {results.map((row) => (
              <tr>
                <td>{row[1]}</td>
                <td>{row[3] || row[2]}</td>
                <td set:html={formatCWV("lcp", row[8])} />
                <td set:html={formatCWV("cls", row[9])} />
                <td set:html={formatCWV("inp", row[13])} />
                <td set:html={formatCWV("fcp", row[11])} />
                <td set:html={formatCWV("ttfb", row[12])} />
                <td set:html={formatCWV("fid", row[10])} />
                <td>{row[14] || "Unknown"}</td>
                <td>
                  {row[5]}Ã—{row[6]}
                </td>
                <td>{row[4] ?? ""}</td>
                <td>
                  <div style="font-size: 13px;">
                    {new Date(row[7]).toLocaleString()}
                  </div>
                  <div style="font-size: 11px; color: #666; margin-top: 2px;">
                    {row[0]}
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
        <p>
          <strong>*</strong> FID (First Input Delay) was deprecated by Google in March 2024 and replaced with INP (Interaction to Next Paint) as an official Core Web Vital. FID data is retained for historical comparison.
        </p>
      ) : (
        <p>No metrics found.</p>
      )
    }

    <div style="margin-top: 2rem; padding: 1rem; background: #f9f9f9; border-radius: 8px; font-size: 14px; color: #555;">
      <h3 style="margin-top: 0; color: #333;">Core Web Vitals Browser Support</h3>
      <p><strong>Current Official Metrics (2024-2025):</strong> LCP, CLS, INP</p>
      <p><strong>Supplementary Metrics:</strong> FCP, TTFB</p>
      
      <div class="baseline-container">         
        <h3>Performance Observer APIs:</h3>
        <div>
          <strong>Largest Contentful Paint (LCP):</strong>
          <BaselineStatus id="largest-contentful-paint" />
        </div>      
         <div>
          <strong>Event Timing API (INP):</strong>
          <BaselineStatus id="event-timing" />
        </div><div>
          <strong>Layout Instability API (CLS):</strong>
          <BaselineStatus id="layout-instability" />
        </div>
      </div>
      <p>Note: Core Web Vitals are part of Interop 2025. Safari currently has limited support but full implementation is expected in future releases.</p>
    </div>
  </main>
</Layout>
<style>
  table {
    border-collapse: collapse;
    background: white;
    width: 100%;
  }
  th,
  td {
    border: 1px solid #ddd;
    padding: 8px 12px;
    font-size: 14px;
  }
  th {
    background: #f0f0f0;
    text-align: left;
  }
  tr:hover {
    background: #f7f7f7;
  }
  h1 {
    margin-bottom: 1rem;
    font-size: 1.5rem;
  }
  .error {
    color: red;
    font-weight: bold;
  }
  pre {
    background: #222;
    padding: 1rem;
    max-height: 300px;
    overflow-x: auto;
    color: #eee;
  }
  .baseline-container div {padding-block-start: 1rem; max-width: 50ch;}
</style>
